#!/usr/bin/env bash

# aws-ssh - login to EC2 instance by name
#
#    from: Easy-EC2 Utilities
#          https://github.com/robertpeteuil/Easy-EC2
#
#  Author: Robert Peteuil   @RobertPeteuil
#

scriptname="aws-ssh"
scriptbuildnum="0.9.2"
scriptbuilddate="2017-03-13"

############################################################
###     PRE-EXECUTION

# TURN ON COLOR IF POSSIBLE, SET THEME
if test -t 1; then            # check if stdout is a terminal
  ncolors=$(tput colors)    # see if it supports colors
  if test -n "$ncolors" && test $ncolors -ge 8; then
  # Set Colors
    bold="$(tput bold)"
    underline="$(tput smul)"
    standout="$(tput smso)"
    normal="$(tput sgr0)"
    black="$(tput setaf 0)"
    red="$(tput setaf 1)"
    green="$(tput setaf 2)"
    yellow="$(tput setaf 3)"
    blue="$(tput setaf 4)"
    magenta="$(tput setaf 5)"
    cyan="$(tput setaf 6)"
    white="$(tput setaf 7)"
  # Set Color Theme - used by echo statements
    CLRnormal=${bold}${white}
    CLRheading=${bold}${green}
    CLRheading2=${bold}${blue}
    CLRtitle=${bold}${cyan}
    CLRtitle2=${bold}${yellow}
    CLRsuccess=${bold}${green}
    CLRwarning=${bold}${yellow}
    CLRerror=${bold}${red}
  fi
fi

############################################################
###   FUNCTIONS

display_ver() {
  echo -e "${CLRheading}${scriptname}${CLRnormal}  ver ${CLRtitle}${scriptbuildnum} ${CLRnormal}- ${CLRtitle}${scriptbuilddate}${CLRnormal}"
}

display_help_text() {
  display_ver
  echo
  echo -e "${CLRtitle}connects to a name-specified AWS EC2 instance via ssh"
  echo
  echo -e "${CLRtitle}USAGE: ${CLRnormal}${scriptname} ${CLRtitle2}instance-name [-n] [-u login-user] [-d] [-V] [-h]${CLRnormal}\n"
  echo -e "${CLRtitle}\tOPTIONS:${CLRnormal}"
  echo -e "${CLRtitle2} instance-name\t${CLRnormal}: (REQUIRED) name tag assigned to the EC2 instance"
  echo -e "${CLRtitle2}            -n\t${CLRnormal}: Don't use PEM key while connecting ${CLRsuccess}*${CLRnormal}"
  echo -e "${CLRtitle2} -u login-user\t${CLRnormal}: (optional) manually specify a login-username for ssh"
  echo -e "${CLRtitle2}            -d\t${CLRnormal}: debug mode"
  echo -e "${CLRtitle2}            -V\t${CLRnormal}: display version info"
  echo -e "${CLRtitle2}            -h\t${CLRnormal}: display help info"
  echo
  echo -e "${CLRsuccess}*${CLRnormal} Note: for users who have appended their ssh-rsa.pub key to 'authorized_keys' on the remote host"
  echo
  exit 0
}

DetermineLoginUser() {
  # Calculate the LoginUsername by determining the image running on the instance

  # Get AMI-ID for Instance Specified by Name
  ImageAMI=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${InstanceName}" --query 'Reservations[*].Instances[].[ImageId]' --output text)
  # Get AMI description for AMI-ID which contains image type info
  ImageDescription=$(aws ec2 describe-images --image-ids "${ImageAMI}" --query 'Images[*].{Name:Name}' --output text)
  case $ImageDescription in
    ubuntu*)  LoginUser="ubuntu"; HostType="Ubuntu" ;;
    suse*)    LoginUser="ec2-user"; HostType="SUSE" ;;
    amzn*)    LoginUser="ec2-user"; HostType="amzn" ;;
    RHEL*)    LoginUser="ec2-user"; HostType="RHEL" ;;
    debian*)  LoginUser="admin"; HostType="Debian" ;;
    febora*)  LoginUser="fedora"; HostType="Fedora" ;;
    centos*)  LoginUser="centos"; HostType="Centos" ;;
    openBSD*) LoginUser="root"; HostType="openBSD" ;;
    *)        LoginUser="ec2-user"; HostType="undetermined-default" ;;
  esac
  [[ "$debugmode" ]] && echo -e "HostType: \t${CLRtitle}${HostType}${CLRnormal}\t LoginUser: ${CLRtitle}${LoginUser}${CLRnormal}\n"
}

######################################################################
###   EXECUTION STARTS HERE

InstanceName=$1

[[ -z $InstanceName ]] && echo -e "${CLRerror}Error:${CLRnormal} No parameters specified\n" && display_help_text

# Parse COMMAND-TAIL Arguments
for arg in "$@"; do
  case "$arg" in
    # -i)                 shift; InstanceId="$1"; shift ;;
    -u)                 shift; shift; UserLoginName="$1"; shift ;;
    -n)                 nopem=true; shift ;;
    -h|--help)          display_help_text ;;
    -V|--version)       display_ver; exit ;;
    -d|--debug)         debugmode=true; shift ;;
  esac
done

# Retrieve Public DNS Name, and Key assigned to instance
InstanceInfo=($(aws ec2 describe-instances --filters "Name=tag:Name,Values=$InstanceName" "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[].[KeyName,PublicDnsName]' --output text))
InstanceKey=${InstanceInfo[0]}
InstanceAddy=${InstanceInfo[1]}

[[ "$debugmode" ]] && echo -e "Address: \t${CLRtitle}${InstanceAddy}${CLRnormal}"
[[ "$debugmode" ]] && [[ ! "$nopem" ]] && echo -e "Key (PEM): \t${CLRtitle}${InstanceKey}${CLRnormal}"

# Unable to retrieve Public DNS Name for host - likely offline
if [ -z "$InstanceAddy" ]; then
  echo -e "Instance not found - possibly offline?"
  exit 1
fi

if [ -z $UserLoginName ]; then
  DetermineLoginUser
else
  [[ "$debugmode" ]] && echo -e "LoginUser set by user: ${CLRtitle}$UserLoginName${CLRnormal}\n"
  LoginUser="$UserLoginName"
fi

if [[ "$nopem" ]]; then
  [[ ! "$debugmode" ]] && echo -e "${CLRheading2}No PEM mode${CLRnormal} - connecting without PEM key\n"
  [[ "$debugmode" ]] && echo -e "${CLRheading2}No PEM mode${CLRnormal}  Connect string: ${CLRtitle}ssh ${LoginUser}@${InstanceAddy}${CLRnormal}\n"
  ssh ${LoginUser}@${InstanceAddy}
  exit 0
else
  [[ "$debugmode" ]] && echo -e "Connect string: ${CLRtitle}ssh -i ${HOME}/.aws/${InstanceKey}.pem ${LoginUser}@${InstanceAddy}${CLRnormal}\n"
  ssh -i "${HOME}/.aws/${InstanceKey}.pem" "${LoginUser}@${InstanceAddy}"
  exit 0
fi
exit 0
