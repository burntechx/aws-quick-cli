#!/usr/bin/env bash

# aws-ssh - login to EC2 instance by name
#
#    from: aws-quick-cli
#          https://github.com/robertpeteuil/aws-quick-cli
#
#  Author: Robert Peteuil   @RobertPeteuil
#

scriptname="aws-ssh"
scriptbuildnum="1.0.0"
scriptbuilddate="2017-04-11"

# source aws-quick-cli init files to add color and display_ver function
if [[ -e "aws-quick-cli-init.sh" ]]; then
  . aws-quick-cli-init.sh
else
  echo "Error - required init files not found"
  exit 1
fi

############################################################
###   FUNCTIONS

display_help_text() {
  display_ver
  echo
  echo -e "${CLRtitle}connects to a name-specified AWS EC2 instance via ssh"
  echo
  echo -e "${CLRtitle}USAGE: ${CLRnormal}${scriptname} ${CLRtitle2}instance-name [-n] [-u login-user] [-d] [-v] [-h]${CLRnormal}\n"
  echo -e "${CLRtitle}\tOPTIONS:${CLRnormal}"
  echo -e "${CLRtitle2} instance-name\t${CLRnormal}: (REQUIRED) name tag assigned to the EC2 instance"
  echo -e "${CLRtitle2} -u login-user\t${CLRnormal}: (optional) manually specify a login-username for ssh"
  echo -e "${CLRtitle2}            -n\t${CLRnormal}: Don't use PEM key while connecting ${CLRsuccess}*${CLRnormal}"
  echo -e "${CLRtitle2}            -d\t${CLRnormal}: debug mode"
  echo -e "${CLRtitle2}            -v\t${CLRnormal}: display version info"
  echo -e "${CLRtitle2}            -h\t${CLRnormal}: display help info"
  echo
  echo -e "${CLRsuccess}*${CLRnormal} Note: for users who have appended their ssh-rsa.pub key to 'authorized_keys' on the remote host"
  echo
  exit 0
}

DetermineLoginUser() {
  # Get AMI description for AMI-ID which contains image type info
  if [[ -z "${ImageDescription[$SELECTION]}" ]]; then
    selectedImageDescription=$(aws ec2 describe-images --image-ids "${ImageAMI[$SELECTION]}" --query 'Images[*].{Name:Name}' --output text)
  else
    selectedImageDescription=${ImageDescription[$SELECTION]}
  fi
  # Determine login user using the AMI-description
  case $selectedImageDescription in
    ubuntu*)  LoginUser="ubuntu";   HostType="Ubuntu" ;;
    suse*)    LoginUser="ec2-user"; HostType="SUSE" ;;
    amzn*)    LoginUser="ec2-user"; HostType="amzn" ;;
    RHEL*)    LoginUser="ec2-user"; HostType="RHEL" ;;
    debian*)  LoginUser="admin";    HostType="Debian" ;;
    febora*)  LoginUser="fedora";   HostType="Fedora" ;;
    centos*)  LoginUser="centos";   HostType="Centos" ;;
    openBSD*) LoginUser="root";     HostType="openBSD" ;;
    *)        LoginUser="ec2-user"; HostType="undetermined-default" ;;
  esac
  [[ "$debugmode" ]] && echo -e "HostType: \t${CLRtitle}${HostType}${CLRnormal}\t LoginUser: ${CLRtitle}${LoginUser}${CLRnormal}\n"
}

######################################################################
###   EXECUTION STARTS HERE

[[ "$1" == "-h" ]] && display_help_text
[[ "$1" == "-v" ]] && display_ver && exit
[[ ${1:0:1} == "-" ]] && echo -e "${CLRerror}Error:${CLRnormal} Instance Name not specified\n" && display_help_text

InstanceName="$1"
shift

# Parse COMMAND-TAIL Arguments
for arg in "$@"; do
  case "$arg" in
    -u)       UserLoginName="$2"; shift; shift ;;
    -n)       nopem=true; shift ;;
    -d)       debugmode=true; shift ;;
  esac
done

# Retrieve Instance Info, including Public DNS Name and Key
InstanceData=($(aws ec2 describe-instances --filters "Name=tag:Name,Values=$InstanceName" "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[].[InstanceId,ImageId,KeyName,PublicDnsName,Tags[?Key==`Name`].Value]' --output text))
numberDataRecords=5

numInstancesFound=${#InstanceData[@]}
numInstancesFound=$((numInstancesFound/numberDataRecords))
[[ "$debugmode" ]] && echo -e "numInstancesFound: \t${numInstancesFound}"

if (( numInstancesFound > 1 )); then
  counter=0
  echo -e "$numInstancesFound instances match this query:\n"
  for (( j=0; j<${#InstanceData[@]}; j=j+numberDataRecords )); do
    (( counter++ ))
    InstanceId[counter]=${InstanceData[$j]}
    ImageAMI[counter]=${InstanceData[$j+1]}
    InstanceKey[counter]=${InstanceData[$j+2]}
    InstanceAddy[counter]=${InstanceData[$j+3]}
    # InstanceName[counter]=${InstanceData[$j+4]}
    ImageDescription[counter]=$(aws ec2 describe-images --image-ids "${InstanceData[$j+1]}" --query 'Images[*].{Name:Name}' --output text)
    echo -e "Instance ${CLRwarning}#${counter}${CLRnormal}"
    echo -e "\t${CLRnormal}Name: ${CLRtitle}${InstanceData[$j+4]}${CLRnormal}\t\tID: ${CLRtitle}${InstanceData[$j]}${CLRnormal}\n\tAMI: ${CLRtitle}${InstanceData[$j+1]}${CLRnormal}\tAMI Name: ${CLRtitle}${ImageDescription[counter]}${CLRnormal}"
    echo
  done
  while [[ ! $selectionValid ]]; do
    echo -en "Enter ${CLRwarning}#${CLRnormal} of instance to connect via ssh (1-$numInstancesFound): "
    read -r -n 1 SELECTION
    if [[ $SELECTION =~ ^[1-$numInstancesFound]$ ]]; then
      echo -e "\n"
      selectionValid=true
    else
      echo -e "\n${CLRerror}Invalid entry:${CLRnormal} enter a number between 1 and $numInstancesFound.\n"
    fi
  done
  echo -e "Connecting to InstanceId: \t${CLRtitle}${InstanceId[$SELECTION]}${CLRnormal}\n"
else  # only one instance matches query - set default values
  SELECTION=0
  InstanceId[0]=${InstanceData[0]}
  ImageAMI[0]=${InstanceData[1]}
  InstanceKey[0]=${InstanceData[2]}
  InstanceAddy[0]=${InstanceData[3]}
fi

if [[ "$debugmode" ]]; then
  echo -e "SELECTION: \t${CLRtitle}$SELECTION${CLRnormal}"
  echo -e "InstanceId: \t${CLRtitle}${InstanceId[$SELECTION]}${CLRnormal}"
  echo -e "ImageAMI: \t${CLRtitle}${ImageAMI[$SELECTION]}${CLRnormal}"
  echo -e "InstanceKey: \t${CLRtitle}${InstanceKey[$SELECTION]}${CLRnormal}"
  echo -e "InstanceAddy:\t${CLRtitle}${InstanceAddy[$SELECTION]}${CLRnormal}"
  [[ ! "$nopem" ]] && echo -e "Key (PEM): \t${CLRtitle}${InstanceKey[$SELECTION]}${CLRnormal}"
fi

# Unable to retrieve Public DNS Name for host - likely offline
if [ -z "${InstanceAddy[$SELECTION]}" ]; then
  echo -e "Instance not found - possibly offline?"
  exit 1
fi

if [ -z "$UserLoginName" ]; then
  DetermineLoginUser
else
  [[ "$debugmode" ]] && echo -e "LoginUser set by user: ${CLRtitle}$UserLoginName${CLRnormal}\n"
  LoginUser="$UserLoginName"
fi

if [[ "$nopem" ]]; then
  [[ ! "$debugmode" ]] && echo -e "${CLRheading2}No PEM mode${CLRnormal} - connecting without PEM key\n"
  [[ "$debugmode" ]] && echo -e "${CLRheading2}No PEM mode${CLRnormal}  Connect string: ${CLRtitle}ssh ${LoginUser}@${InstanceAddy[$SELECTION]}${CLRnormal}\n"
  ssh "${LoginUser}@${InstanceAddy[$SELECTION]}"
  exit 0
else
  [[ "$debugmode" ]] && echo -e "Connect string: ${CLRtitle}ssh -i ${HOME}/.aws/${InstanceKey[$SELECTION]}.pem ${LoginUser}@${InstanceAddy[$SELECTION]}${CLRnormal}\n"
  ssh -i "${HOME}/.aws/${InstanceKey[$SELECTION]}.pem" "${LoginUser}@${InstanceAddy[$SELECTION]}"
  exit 0
fi
exit 0
