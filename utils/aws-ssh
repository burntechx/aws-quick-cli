#!/usr/bin/env bash

# aws-ssh - login to EC2 instance by name
#
#    from: aws-quick-cli
#          https://github.com/robertpeteuil/aws-quick-cli
#
#  Author: Robert Peteuil   @RobertPeteuil
#

scriptname="aws-ssh"
scriptbuildnum="0.9.5.2"
scriptbuilddate="2017-04-10"

# source aws-quick-cli init files to add color and display_ver function
if [[ -e "aws-quick-cli-init.sh" ]]; then
  . aws-quick-cli-init.sh
else
  echo "Error - required init files not found"
  exit 1
fi

############################################################
###   FUNCTIONS

display_help_text() {
  display_ver
  echo
  echo -e "${CLRtitle}connects to a name-specified AWS EC2 instance via ssh"
  echo
  echo -e "${CLRtitle}USAGE: ${CLRnormal}${scriptname} ${CLRtitle2}instance-name [-n] [-u login-user] [-d] [-v] [-h]${CLRnormal}\n"
  echo -e "${CLRtitle}\tOPTIONS:${CLRnormal}"
  echo -e "${CLRtitle2} instance-name\t${CLRnormal}: (REQUIRED) name tag assigned to the EC2 instance"
  echo -e "${CLRtitle2} -u login-user\t${CLRnormal}: (optional) manually specify a login-username for ssh"
  echo -e "${CLRtitle2}            -n\t${CLRnormal}: Don't use PEM key while connecting ${CLRsuccess}*${CLRnormal}"
  echo -e "${CLRtitle2}            -d\t${CLRnormal}: debug mode"
  echo -e "${CLRtitle2}            -v\t${CLRnormal}: display version info"
  echo -e "${CLRtitle2}            -h\t${CLRnormal}: display help info"
  echo
  echo -e "${CLRsuccess}*${CLRnormal} Note: for users who have appended their ssh-rsa.pub key to 'authorized_keys' on the remote host"
  echo
  exit 0
}

DetermineLoginUser() {
  # Calculate the LoginUsername by determining the image running on the instance

  # Get AMI-ID for Instance Specified by Name
  ImageAMI=($(aws ec2 describe-instances --filters "Name=tag:Name,Values=${InstanceName}" --query 'Reservations[*].Instances[].[ImageId]' --output text))
  # Get AMI description for AMI-ID which contains image type info
  ImageDescription=$(aws ec2 describe-images --image-ids "${ImageAMI}" --query 'Images[*].{Name:Name}' --output text)
  case $ImageDescription in
    ubuntu*)  LoginUser="ubuntu"; HostType="Ubuntu" ;;
    suse*)    LoginUser="ec2-user"; HostType="SUSE" ;;
    amzn*)    LoginUser="ec2-user"; HostType="amzn" ;;
    RHEL*)    LoginUser="ec2-user"; HostType="RHEL" ;;
    debian*)  LoginUser="admin"; HostType="Debian" ;;
    febora*)  LoginUser="fedora"; HostType="Fedora" ;;
    centos*)  LoginUser="centos"; HostType="Centos" ;;
    openBSD*) LoginUser="root"; HostType="openBSD" ;;
    *)        LoginUser="ec2-user"; HostType="undetermined-default" ;;
  esac
  [[ "$debugmode" ]] && echo -e "HostType: \t${CLRtitle}${HostType}${CLRnormal}\t LoginUser: ${CLRtitle}${LoginUser}${CLRnormal}\n"
}

######################################################################
###   EXECUTION STARTS HERE

[[ "$1" == "-h" ]] && display_help_text
[[ "$1" == "-v" ]] && display_ver && exit
[[ ${1:0:1} == "-" ]] && echo -e "${CLRerror}Error:${CLRnormal} Instance Name not specified\n" && display_help_text

InstanceName="$1"

shift

# Parse COMMAND-TAIL Arguments
for arg in "$@"; do
  case "$arg" in
    -u)       UserLoginName="$2"; shift; shift ;;
    -n)       nopem=true; shift ;;
    # -h)       display_help_text ;;
    # -v)       display_ver; exit ;;
    -d)       debugmode=true; shift ;;
  esac
done

# Retrieve Public DNS Name, and Key assigned to instance
InstanceInfo=($(aws ec2 describe-instances --filters "Name=tag:Name,Values=$InstanceName" "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[].[KeyName,PublicDnsName]' --output text))
InstanceKey=${InstanceInfo[0]}
InstanceAddy=${InstanceInfo[1]}

[[ "$debugmode" ]] && echo -e "Address: \t${CLRtitle}${InstanceAddy}${CLRnormal}"
[[ "$debugmode" ]] && [[ ! "$nopem" ]] && echo -e "Key (PEM): \t${CLRtitle}${InstanceKey}${CLRnormal}"

# Unable to retrieve Public DNS Name for host - likely offline
if [ -z "$InstanceAddy" ]; then
  echo -e "Instance not found - possibly offline?"
  exit 1
fi

if [ -z "$UserLoginName" ]; then
  DetermineLoginUser
else
  [[ "$debugmode" ]] && echo -e "LoginUser set by user: ${CLRtitle}$UserLoginName${CLRnormal}\n"
  LoginUser="$UserLoginName"
fi

if [[ "$nopem" ]]; then
  [[ ! "$debugmode" ]] && echo -e "${CLRheading2}No PEM mode${CLRnormal} - connecting without PEM key\n"
  [[ "$debugmode" ]] && echo -e "${CLRheading2}No PEM mode${CLRnormal}  Connect string: ${CLRtitle}ssh ${LoginUser}@${InstanceAddy}${CLRnormal}\n"
  ssh "${LoginUser}@${InstanceAddy}"
  exit 0
else
  [[ "$debugmode" ]] && echo -e "Connect string: ${CLRtitle}ssh -i ${HOME}/.aws/${InstanceKey}.pem ${LoginUser}@${InstanceAddy}${CLRnormal}\n"
  ssh -i "${HOME}/.aws/${InstanceKey}.pem" "${LoginUser}@${InstanceAddy}"
  exit 0
fi
exit 0
