#!/usr/bin/env bash

# aws-toggle - called by aws-start & aws-stop to start/stop instance by name
#
#    from: aws-quick-cli
#          https://github.com/robertpeteuil/aws-quick-cli
#
#  Author: Robert Peteuil   @RobertPeteuil
#

scriptname="aws-toggle"
scriptbuildnum="1.0.3"
scriptbuilddate="2018-01-25"

############################################################
###   FUNCTIONS

display_help_text() {
  display_ver
  echo
  echo -e "${CLRtitle}${HelpTextVerb} the specified AWS EC2 instance"
  echo
  echo -e "${CLRtitle}USAGE: ${CLRnormal}${scriptname} ${CLRtitle2}instance-name [-v] [-h]${CLRnormal}"
  echo
  echo -e "${CLRtitle2} instance-name\t${CLRnormal}: (REQUIRED) name tag assigned to the EC2 instance"
  echo -e "\n${CLRtitle}\tOPTIONS:${CLRnormal}"
  echo -e "${CLRtitle2}            -v\t${CLRnormal}: display version info"
  echo -e "${CLRtitle2}            -h\t${CLRnormal}: display help info"
  echo
  exit 0
}

######################################################################
###   EXECUTION STARTS HERE

if [[ "$1" == "start" ]]; then
  # VARS FOR AWS-START
  scriptname="aws-start"
  InstanceStateValue="stopped"
  HelpTextVerb="STARTS"
  selectionVerb="start"
  ec2Command="start-instances"
  warningMessage1="stopped"
  warningMessage2="started"
elif [[ "$1" == "stop" ]]; then
  # VARS FOR AWS-STOP
  scriptname="aws-stop"
  InstanceStateValue="running"
  HelpTextVerb="STOPS"
  selectionVerb="stop"
  ec2Command="stop-instances"
  warningMessage1="started"
  warningMessage2="stopped"
else
  echo "This script can only be called from aws-start or aws-stop"
  exit 1
fi
shift

# source aws-quick-cli init files to add color and display_ver function
if [[ -e "aws-quick-cli-init.sh" ]]; then
  . aws-quick-cli-init.sh
else
  echo "Error - required init file not found"
  exit 1
fi


[[ "$1" == "-h" ]] && display_help_text
[[ "$1" == "-v" ]] && display_ver && exit
[[ ${1:0:1} == "-" || $1 == "" ]] && echo -e "${CLRerror}Error:${CLRnormal} Instance Name not specified\n" && display_help_text

InstanceName="$1"
shift


InstanceData=($(aws ec2 describe-instances --filters "Name=tag:Name,Values=${InstanceName}" "Name=instance-state-name,Values=${InstanceStateValue}" --query 'Reservations[*].Instances[].[InstanceId,ImageId,Tags[?Key==`Name`].Value]' --output text))
numberDataRecords=3

numInstancesFound=${#InstanceData[@]}
numInstancesFound=$((numInstancesFound/numberDataRecords))

if (( numInstancesFound > 1 )); then
  counter=0
  echo -e "$numInstancesFound instances match this query:\n"
  for (( j=0; j<${#InstanceData[@]}; j=j+numberDataRecords )); do
    (( counter++ ))
    InstanceId[counter]=${InstanceData[$j]}
    # ImageAMI=${InstanceData[$j+1]}
    # InstanceName=${InstanceData[$j+2]}
    ImageDescription=($(aws ec2 describe-images --image-ids "${InstanceData[$j+1]}" --query 'Images[*].{Name:Name}' --output text))
    echo -e "Instance ${CLRwarning}#${counter}${CLRnormal}"
    echo -e "\t${CLRnormal}Name: ${CLRtitle}${InstanceData[$j+2]}${CLRnormal}\t\tID: ${CLRtitle}${InstanceData[$j]}${CLRnormal}\n\tAMI: ${CLRtitle}${InstanceData[$j+1]}${CLRnormal}\tAMI Name: ${CLRtitle}${ImageDescription[0]}${CLRnormal}"
    echo
  done
  while [[ ! $selectionValid ]]; do
    echo -en "Enter ${CLRwarning}#${CLRnormal} of instance to ${selectionVerb} (1-$numInstancesFound): "
    read -r -n 1 SELECTION
    if [[ $SELECTION =~ ^[1-$numInstancesFound]$ ]]; then
      echo -e "\n"
      selectionValid=true
    else
      echo -e "\n${CLRerror}Invalid entry:${CLRnormal} enter a number between 1 and $numInstancesFound.\n"
    fi
  done
else  # only one instance matches query - set default values
  SELECTION=0
  InstanceId[0]=${InstanceData[0]}
fi

if [ -n "${InstanceId[$SELECTION]}" ]; then
  aws ec2 ${ec2Command} --instance-ids "${InstanceId[$SELECTION]}" --output text
else
  echo -e "${CLRwarning}Instance: ${InstanceName} not found ${warningMessage1}${CLRnormal} - possibly already ${warningMessage2}?"
  exit 1
fi

exit 0
